{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,aADA,CACA,QAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQlB,SACG,uBACCO,KAAK,OACLC,MAAQT,EACRU,SArBkB,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAMTA,EAAKC,OANI,uBAKfC,EALe,EAKfA,KAGEC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZvB,kBAgBZY,GAhBY,4CAAH,sDCKPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAC1B,MAA0BrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAKY,EACLL,SAAQ,SAGrB,CAACb,IAEGc,EDZwBK,CAAanB,GAAhCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACI,qCACC,6BAAKb,IAELa,GAAW,mBAAGjB,UAAU,mCAAb,0BAER,qBAAMA,UAAY,YAAlB,SAGQc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIhB,aEfpB2B,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEQ2C,EAAWb,KAAI,SAAAR,GAAQ,OACnB,aADwB,CACvB,EAAD,CAEAA,SAAYA,GADLA,YCnB/BsB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5424a492.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault(); //Evita que se realice el recargo en un submit\r\n        \r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n        /*Al tener un form no es necesario ningun agrupador*/\r\n        <form onSubmit={ handleSubmit }> \r\n           <input //Cuando se trabajan varios atributos se separan por linea\r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n           /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=8EvzGn4bnJBt0clELOmnieCjJuKkJzdO`\r\n    const resp = await fetch(url);\r\n    const {\r\n        data\r\n    } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //El signo de interrogacion asegura que venga las imagenes\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);//Los dos puntos son para renombrar\r\n\r\n    return (\r\n        <>\r\n         <h3>{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading.....</p>}\r\n\r\n            < div className = \"card-grid\" >\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img} //este spread envia cada propiedad por separado \r\n                        />\r\n                    ))\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { useState, useEffect } from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => { //El use effect es para evitar que asi haya otra funcion, esta solo se renderice una vez \r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({ \r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n    return state; // {data:[], loading: true};\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//GifExpertApp\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man']); \r\n    //El useState osea los hooks es lo que hace que se renderize en tiempo real\r\n\r\n    /* const handleAdd = () =>{\r\n        //setCategories( ['HunterXHunter', ...categories] );\r\n        setCategories( cats => [ ...cats, 'HunterXHunter'] );\r\n        //El parametro guarda el state anterior y lo renderiza con el spread para agregar el nuevo elemento\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category =>( //Parentesis indica que returna un objeto\r\n                        <GifGrid \r\n                        key = {category}\r\n                        category = {category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n  \n);\n\n"],"sourceRoot":""}